generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  username      String             @unique
  email         String             @unique
  firstName     String
  lastName      String
  password      String
  picturePath   String?
  organizations UserOrganization[]
  schoolClasses UserSchoolClass[]
  classGroups   UserClassGroup[]
  grades        Grade[]
  absences      Absence[]
  submissions   Submission[]
  SchoolClass   SchoolClass[]
}

model Organization {
  id            Int                @id @default(autoincrement())
  name          String
  creatorId     Int
  users         UserOrganization[]
  schoolClasses UserSchoolClass[]
  grades        Grade[]
  absences      Absence[]
  posts         Post[]
}

model UserOrganization {
  id               Int          @id @default(autoincrement())
  user             User         @relation(fields: [userId], references: [id])
  userId           Int
  organization     Organization @relation(fields: [organizationId], references: [id])
  organizationId   Int
  role             String
  organizationName String
}

model SchoolClass {
  id             Int                     @id @default(autoincrement())
  name           String
  identifier     String
  subject        String
  icon           String
  theme          String
  users          UserSchoolClass[]
  classGroups    ClassGroupSchoolClass[]
  grades         Grade[]
  absences       Absence[]
  posts          Post[]
  creator        User                    @relation(fields: [creatorId], references: [id])
  creatorId      Int
  organizationId Int
}

model ClassGroup {
  id             Int                     @id @default(autoincrement())
  name           String
  organizationId Int
  schoolClasses  ClassGroupSchoolClass[]
  users          UserClassGroup[]
}

model UserSchoolClass {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  schoolClass    SchoolClass  @relation(fields: [schoolClassId], references: [id])
  schoolClassId  Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model ClassGroupSchoolClass {
  id            Int         @id @default(autoincrement())
  schoolClass   SchoolClass @relation(fields: [schoolClassId], references: [id])
  schoolClassId Int
  classGroup    ClassGroup  @relation(fields: [classGroupId], references: [id])
  classGroupId  Int
}

model UserClassGroup {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  classGroup   ClassGroup @relation(fields: [classGroupId], references: [id])
  classGroupId Int
}

model Grade {
  id             Int          @id @default(autoincrement())
  date           DateTime
  value          String
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  schoolClass    SchoolClass  @relation(fields: [schoolClassId], references: [id])
  schoolClassId  Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Absence {
  id             Int          @id @default(autoincrement())
  date           DateTime
  excused        Boolean
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  schoolClass    SchoolClass  @relation(fields: [schoolClassId], references: [id])
  schoolClassId  Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Post {
  id             Int              @id @default(autoincrement())
  title          String
  body           String
  type           String
  schoolClass    SchoolClass      @relation(fields: [schoolClassId], references: [id])
  schoolClassId  Int
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId Int
  attachments    PostAttachment[]
  submissions    Submission[]
  comments       PostComment[]
}

model PostAttachment {
  id       Int    @id @default(autoincrement())
  filepath String
  filename String
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
}

model Submission {
  id          Int                    @id @default(autoincrement())
  submitted   Boolean
  submittedAt DateTime
  post        Post                   @relation(fields: [postId], references: [id])
  postId      Int
  user        User                   @relation(fields: [userId], references: [id])
  userId      Int
  attachments SubmissionAttachment[]
}

model SubmissionAttachment {
  id           Int        @id @default(autoincrement())
  filepath     String
  filename     String
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId Int
}

model PostComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  body      String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model OrganizationInvitations {
  id               Int    @id @default(autoincrement())
  organizationId   Int
  organizationName String
  role             String
  code             String @default(dbgenerated())
}
